#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################


R8.1 Encapsulation

Encapsulation is the act of providing a public interface and hiding the implementation details.
It is achieved by bundling data and methods together within a class, and restricting direct access to the internal details of the object.
The benefits of Encapsulation include:
1.Data Protection:
    By keeping the internal state of an object private, encapsulation prevents unauthorized access and modification of the data.
2.Modularity:
    Encapsulation promotes modularity by hiding the internal implementation details of an object. This allows for easy updates or modifications to the internal workings of an object without affecting the other parts of the program that use the object.
3.Code Organization:
    Encapsulation helps in organizing code by grouping related properties and methods together within a class. This improves code readability, maintainability, and reusability.

R8.4 Public interface

public interface:
    The set of public methods and variables that are accessible to other classes. It defines how other parts of the program can interact with the class.
the implementation of a class:
    The internal details and logic of how the class works. It includes the private methods, variables, and any other supporting code that is not part of the public interface. The implementation is hidden from other classes and is not directly accessible to them.
By separating the public interface from the implementation, Java provides encapsulation and information hiding. This allows the class to change its internal implementation without affecting the code that uses it, as long as the public interface remains the same.


R8.7 Instance versus static

An instance method is a method that belongs to an instance of a class.
It can be invoked on an object of that class and can access the instance variables and other instance methods of the object.
Instance methods are typically used to operate on the specific state of an object.

A static method in Java belongs to the class itself, rather than to any specific instance of the class.
It can be invoked using the class name directly, without creating an object of the class. Static methods cannot access instance variables directly, as they are not associated with any particular object.
Static methods are declared with the "static" keyword and can be used for operations that do not require access to specific instance data or behavior.
They are commonly used for utility methods or operations that are not dependent on object state.

R8.8 Mutator and accessor
A mutator method(setter method) is a method used to modify the state or values of an object's attributes (instance variables).
It provides a means to update the internal state of an object by setting new values for one or more attributes.
Mutator methods typically have a void return type and accept one or more parameters to set the new values.

An accessor method(getter method) is a method used to retrieve or access the values of an object's attributes (instance variables).
It provides a way to obtain the current values of the attributes without directly accessing or modifying them.
Accessor methods typically have a return type that matches the type of the attribute they are retrieving.

R8.9 Implicit parameter

An implicit parameter is commonly seen in object-oriented programming languages like Java when invoking instance methods.
In these languages, the implicit parameter is the instance or object on which the method is called.
It allows the method to access the instance variables and other instance methods of the object.

an explicit parameter is a parameter that is explicitly specified in the method call.
It is provided as a value or expression within parentheses when calling a method. It is commonly provided within the parenthesis.
The explicit parameter allows the caller to pass specific values or references to the method.

R8.10 Implicit parameter
1.An instance method can have one implicit parameter, which is the instance or object on which the method is called
2.A static method in Java does not have an implicit parameter.
3.The number of explicit parameters for a method is defined in its method signature.

R8.12 Constructors

1.A class in Java can have multiple constructors.
2.Tt is possible to have a class with no constructors explicitly defined. In such cases, Java provides a default no-argument constructor implicitly.
3.When a class has multiple constructors, the constructor that gets called depends on the arguments provided when creating an object or invoking the constructor.
If the arguments match the parameters of one of the constructors, that specific constructor executes.

R8.16 Instance variables
When we declare a variable as private, it means that it can only be directly accessed within the same class.
It prevents other classes from directly accessing or modifying the variable.
This helps to ensure that the internal state of an object is controlled and manipulated according to the intended design and behavior.

By keeping instance variables private, we can control their access through public interface which provide controlled and well-defined interfaces for accessing and modifying the data.
The public methods act as a layer of abstraction, enabling us to hide the implementation details and internal representation of the object.

R8.19 The 'this' reference
The "this" reference is a special keyword that refers to the current instance of a class.

1.Accessing instance variables of the current object.
2.Calling other constructors:
The "this" keyword can be used to call another constructor in the same class.
This is known as constructor chaining, where one constructor can invoke another constructor with different arguments.
3.Passing the current object as a parameter.
4.Returning the current object.

R8.20 Zero, null, false, empty String

1.Zero: Zero is a specific numeric value and can be used in mathematical calculations.

2.Null reference: Null is a special value that represents the absence of a reference or object.
It is typically used to indicate the intentional absence of a value or when a value is not yet assigned.

3.False: False is a boolean value that represents the logical state of "not true".
It is often used when a condition or assertion is not satisfied.

4.Empty string: An empty string is a string value that has no characters. It is a valid string object but contains no characters.



